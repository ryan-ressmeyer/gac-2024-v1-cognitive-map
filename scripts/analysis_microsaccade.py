"""
Microsaccade Control Analysis for V1 Cognitive Map Study
=========================================================

This script tests whether microsaccades during stimulus presentation could confound
attention effects on V1 multi-unit activity.

BACKGROUND:
-----------
Microsaccades are small, rapid eye movements (0.1-2Â°) that occur even during fixation.
They can influence neural activity through both feedforward effects on the retinal image and
corollary discharge signals. Previous studies have shown that microsaccade rate and direction
can be modulated by attention, potentially confounding neural attention effects.

HYPOTHESIS:
-----------
If attention effects are due to microsaccade differences, then including only trials
without microsaccades during stimulus presentation should eliminate the attention effect.

METHOD:
-------
- Detect microsaccades using velocity threshold method
- Identify trials with microsaccades during stimulus period
- Compare attention effects in trials with vs without microsaccades

DEPENDENCIES:
-------------
- Requires preprocessed_data.h5 generated by preprocessing.py
- numpy, matplotlib, scipy (signal processing)
- pathlib, tqdm (progress bars), h5py
- Custom utils module (add_significance_window)

Install dependencies using uv:
    uv sync
    uv run python scripts/analysis_microsaccade.py

USAGE:
------
1. First run preprocessing.py to generate preprocessed_data.h5
2. Run this script: python scripts/analysis_microsaccade.py

OUTPUTS:
--------
- Microsaccade timing visualizations (raster plots and histograms)
- Neural activity comparisons: saccade vs no-saccade trials
- Attention effect in microsaccade-free trials
- Optional: Trial-by-trial diagnostic PDF (set EXPORT_SACCADE_PDF=True)
- Figures saved to figures/microsaccade/ directory

Author: Ryan Ressmeyer
"""

#%%
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from pathlib import Path
from scipy.signal import find_peaks
from scipy.stats import ttest_ind
from matplotlib.backends.backend_pdf import PdfPages
from tqdm import tqdm
from utils import add_significance_window, is_notebook
import h5py
np.random.seed(1001)  # For reproducibility

if is_notebook():
    matplotlib.use('inline')
else:
    matplotlib.use('Qt5Agg')

#%%
# =============================================================================
# CONFIGURATION SECTION
# =============================================================================

# Data paths
DATAGEN_DIR = '/home/ryanress/code/gac-2024-v1-cognitive-map/data/'
PREPROCESSED_DATA_FILE = Path(DATAGEN_DIR) / 'preprocessed_data.h5'

# Analysis parameters
MONKEYS = ['monkeyF', 'monkeyN']
CURRENT_TASK = 'lums'

# Microsaccade detection parameters
MICROSACCADE_THRESHOLD = {
    'monkeyN': 13,  # Velocity threshold (deg/s)
    'monkeyF': 10   # Velocity threshold (deg/s)
}
MIN_SACCADE_INTERVAL = 100  # Minimum time between saccades (ms at 1kHz = samples)
EXPORT_SACCADE_PDF = True  # Export PDF with microsaccade detection for inspection

# Analysis time windows
ATTENTION_WINDOW = [0.15, 0.5]
MICROSACCADE_WINDOW = [-.025, 0.5]  # Time window for microsaccade exclusion (s)
MICROSACCADE_EFFECT_WINDOW = [0.075, 0.2]  # Time window for testing microsaccade effect on MUA (s)

# Figure output
SAVE_FIGS = True
if SAVE_FIGS:
    FIGURE_DIR = Path('./figures/microsaccade')
    FIGURE_DIR.mkdir(exist_ok=True, parents=True)

#%%
# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

def detect_microsaccades(eye_speed, t_rel_stim, threshold, min_interval, total_trials, **kwargs):
    """
    Detect microsaccades using velocity threshold method.

    Args:
        eye_speed: Eye speed array [trials x time]
        t_rel_stim: Time vector relative to stimulus onset
        threshold: Velocity threshold for detection (deg/s)
        min_interval: Minimum time between saccades (samples)
        total_trials: Total number of trials
        **kwargs: Additional arguments (ignored, allows passing full data dict)

    Returns:
        saccade_trials: array of trial indices with detected saccades
        saccade_times: array of saccade times relative to stimulus
        saccade_samples: list of sample indices per trial
    """
    saccade_trials_list = []
    saccade_samples_list = []
    saccade_times_list = []

    for iT in tqdm(range(total_trials), desc="Detecting microsaccades"):
        peaks, _ = find_peaks(eye_speed[iT, :], height=threshold, distance=min_interval)
        peaks = peaks[peaks > 1]  # Exclude any peaks at time 1

        # Always append peaks (even if empty) to maintain trial alignment
        saccade_samples_list.append(peaks)

        # Only append to other lists when microsaccades are actually detected
        if len(peaks) > 0:
            saccade_trials_list.append(np.ones(len(peaks)) * iT)
            saccade_times_list.append(t_rel_stim[peaks])

    # Concatenate results
    saccade_trials = np.concatenate(saccade_trials_list).astype(int) if saccade_trials_list else np.array([])
    saccade_times = np.concatenate(saccade_times_list) if saccade_times_list else np.array([])
    saccade_samples = saccade_samples_list

    return saccade_trials, saccade_times, saccade_samples


def generate_microsaccade_diagnostic_pdf(pdf_path, eye_position, eye_speed, t_rel_stim,
                                         saccade_samples, threshold, trial_attended):
    """
    Generate a multi-page PDF with trial-by-trial microsaccade detection diagnostics.

    Args:
        pdf_path: Path to save the PDF file
        eye_position: Filtered eye position array [trials x time x 2]
        eye_speed: Eye speed array [trials x time]
        t_rel_stim: Time vector relative to stimulus onset
        saccade_samples: List of arrays containing sample indices of detected saccades per trial
        threshold: Velocity threshold used for detection
        trial_attended: Array indicating attention condition per trial (1=attended, 0=unattended)
    """
    total_trials = eye_position.shape[0]

    with PdfPages(pdf_path) as pdf:
        for iT in tqdm(range(total_trials), desc="Generating PDF"):
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8), sharex=True)

            # Determine attention condition for title
            attn_label = "Attended" if trial_attended[iT] == 1 else "Unattended"
            fig.suptitle(f'Trial {iT+1}/{total_trials} - {attn_label}', fontsize=14, fontweight='bold')

            # Top subplot: Eye position (X and Y)
            # Plot filtered traces
            ax1.plot(t_rel_stim, eye_position[iT, :, 0], 'C0-', label='X Position', linewidth=1.5)
            ax1.plot(t_rel_stim, eye_position[iT, :, 1], 'C1-', label='Y Position', linewidth=1.5)
            ax1.axvline(x=0, color='k', linestyle='--', linewidth=1, alpha=0.5, label='Stimulus Onset')

            # Add vertical lines for detected microsaccades
            if len(saccade_samples[iT]) > 0:
                for saccade_idx in saccade_samples[iT]:
                    ax1.axvline(x=t_rel_stim[saccade_idx], color='g', linestyle='-',
                               linewidth=2, alpha=0.7)

            ax1.set_ylabel('Position (degrees)', fontsize=11)
            ax1.set_title('Eye Position', fontsize=12)
            ax1.legend(loc='upper right', fontsize=9)
            ax1.grid(True, alpha=0.3)
            ax1.set_ylim(-1, 1)

            # Bottom subplot: Eye speed
            ax2.plot(t_rel_stim, eye_speed[iT, :], 'k-', linewidth=1.5, label='Speed')
            ax2.axhline(y=threshold, color='orange', linestyle='--', linewidth=2,
                       label=f'Threshold ({threshold} deg/s)', zorder=5)
            ax2.axvline(x=0, color='k', linestyle='--', linewidth=1, alpha=0.5)

            # Add vertical lines for detected microsaccades
            if len(saccade_samples[iT]) > 0:
                for idx, saccade_idx in enumerate(saccade_samples[iT]):
                    label = 'Detected Saccade' if idx == 0 else None
                    ax2.axvline(x=t_rel_stim[saccade_idx], color='g', linestyle='-',
                               linewidth=2, alpha=0.7, label=label)

            ax2.set_xlabel('Time relative to stimulus (s)', fontsize=11)
            ax2.set_ylabel('Speed (deg/s)', fontsize=11)
            ax2.set_title('Eye Speed', fontsize=12)
            ax2.legend(loc='upper right', fontsize=9)
            ax2.grid(True, alpha=0.3)

            # Set consistent y-axis limits for speed
            ax2.set_ylim(0, threshold * 4)

            plt.tight_layout()
            pdf.savefig(fig, dpi=150)
            plt.close(fig)

#%%
# =============================================================================
# LOAD PREPROCESSED DATA FROM HDF5
# =============================================================================

print("="*70)
print("MICROSACCADE CONTROL ANALYSIS")
print("="*70)
print(f"Loading preprocessed data from: {PREPROCESSED_DATA_FILE}")
print(f"Analyzing monkeys: {', '.join(MONKEYS)}")
print(f"Task: {CURRENT_TASK}")
print("="*70)

# Load data for both monkeys from HDF5
monkey_data = {}

with h5py.File(PREPROCESSED_DATA_FILE, 'r') as f:
    for monkey in MONKEYS:
        monkey_group = f[monkey]

        # Load arrays for this monkey
        monkey_data[monkey] = {
            'population_mua': monkey_group['population_mua'][:],
            'eye_position': monkey_group['eye_position_filtered'][:],
            'eye_velocity': monkey_group['eye_velocity'][:],
            'eye_speed': monkey_group['eye_speed'][:],
            't_rel_stim': monkey_group['t_rel_stim'][:],
            'trial_attended': monkey_group['trial_attended'][:]
        }

# Print summary statistics for both monkeys
print("\nData Summary:")
for monkey in MONKEYS:
    data = monkey_data[monkey]
    total_trials = data['population_mua'].shape[0]
    n_attended = np.sum(data['trial_attended'] == 1)
    n_unattended = np.sum(data['trial_attended'] == 0)

    print(f"\n{monkey}:")
    print(f"   - Total trials: {total_trials}")
    print(f"   - Attended trials: {n_attended}")
    print(f"   - Unattended trials: {n_unattended}")

#%%
# =============================================================================
# CONTROL 1: MICROSACCADE ANALYSIS
# =============================================================================

print("""
Test whether microsaccades during stimulus presentation could confound attention effects.

BACKGROUND:
Microsaccades are small, rapid eye movements (0.1-2Â°) that occur even during fixation.
They can influence neural activity through both feedforward effects on the retinal image and
corollary discharge signals. Previous studies have shown that microsaccade rate and direction
can be modulated by attention, potentially confounding neural attention effects.

HYPOTHESIS: If attention effects are due to microsaccade differences, then including only trials
without microsaccades during stimulus presentation should eliminate the attention effect.

METHOD:
- Detect microsaccades using velocity threshold method
- Identify trials with microsaccades during stimulus period (0-400ms)
- Compare attention effects in trials with vs without microsaccades
""")

print("\n1. CONTROL 1: Microsaccade detection and analysis...")
print("   Using velocity thresholding method for microsaccade detection")
print(f"   - Threshold: MonkeyN={MICROSACCADE_THRESHOLD['monkeyN']} deg/s, MonkeyF={MICROSACCADE_THRESHOLD['monkeyF']} deg/s")
print(f"   - Minimum intersaccade distance: {MIN_SACCADE_INTERVAL} ms")
print(f"   - Analysis window: {MICROSACCADE_WINDOW[0]}-{MICROSACCADE_WINDOW[1]} s")

# Detect microsaccades for both monkeys
microsaccade_data = {}
for monkey in MONKEYS:
    data = monkey_data[monkey]
    total_trials = data['population_mua'].shape[0]

    saccade_trials, saccade_times, saccade_samples = detect_microsaccades(
        eye_speed=data['eye_speed'],
        t_rel_stim=data['t_rel_stim'],
        threshold=MICROSACCADE_THRESHOLD[monkey],
        min_interval=MIN_SACCADE_INTERVAL,
        total_trials=total_trials
    )

    microsaccade_data[monkey] = {
        'saccade_trials': saccade_trials,
        'saccade_times': saccade_times,
        'saccade_samples': saccade_samples,
        'total_trials': total_trials
    }

    print(f'\n{monkey}:')
    print(f'   - Detected {len(saccade_times)} microsaccades across {total_trials} trials')

#%%
# Generate example figure for trial 130 from Monkey F (for presentation)
print("\n   Generating example microsaccade detection figure (Trial 130, Monkey F)...")

trial_idx = 129  # Trial 130 (0-indexed)
monkey_example = 'monkeyF'

# Get data for this trial
eye_pos = monkey_data[monkey_example]['eye_position'][trial_idx]
eye_spd = monkey_data[monkey_example]['eye_speed'][trial_idx]
t_rel_stim = monkey_data[monkey_example]['t_rel_stim']
trial_att = monkey_data[monkey_example]['trial_attended'][trial_idx]
saccade_samps = microsaccade_data[monkey_example]['saccade_samples'][trial_idx]
threshold = MICROSACCADE_THRESHOLD[monkey_example]

# Create figure
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 3.5), sharex=True)

# Determine attention condition for title
attn_label = "Attended" if trial_att == 1 else "Unattended"
title = f'Trial 130 - Monkey F - {attn_label}'

# Top subplot: Eye position (X and Y)
ax1.plot(t_rel_stim, eye_pos[:, 0], 'C0-', label='X Position', linewidth=1.5)
ax1.plot(t_rel_stim, eye_pos[:, 1], 'C1-', label='Y Position', linewidth=1.5)
ax1.axvline(x=0, color='k', linestyle='--', linewidth=1, alpha=0.5, label='Stimulus Onset')

# Add vertical lines for detected microsaccades
if len(saccade_samps) > 0:
    for saccade_idx in saccade_samps:
        ax1.axvline(x=t_rel_stim[saccade_idx], color='g', linestyle='-',
                   linewidth=2, alpha=0.7)

ax1.set_ylabel('Position (degrees)', fontsize=11)
ax1.set_title(title+'\nEye Position', fontsize=12)
ax1.legend(loc='upper right', fontsize=9)
ax1.grid(True, alpha=0.3)
ax1.set_ylim(-0.2, 0.3)

# Bottom subplot: Eye speed
ax2.plot(t_rel_stim, eye_spd, 'k-', linewidth=1.5, label='Speed')
ax2.axhline(y=threshold, color='orange', linestyle='--', linewidth=2,
           label=f'Threshold ({threshold} deg/s)', zorder=5)
ax2.axvline(x=0, color='k', linestyle='--', linewidth=1, alpha=0.5)

# Add vertical lines for detected microsaccades
if len(saccade_samps) > 0:
    for idx, saccade_idx in enumerate(saccade_samps):
        label = 'Detected Saccade' if idx == 0 else None
        ax2.axvline(x=t_rel_stim[saccade_idx], color='g', linestyle='-',
                   linewidth=2, alpha=0.7, label=label)

ax2.set_xlabel('Time relative to stimulus (s)', fontsize=11)
ax2.set_ylabel('Speed (deg/s)', fontsize=11)
ax2.set_title('Eye Speed', fontsize=12)
ax2.legend(loc='upper right', fontsize=9)
ax2.grid(True, alpha=0.3)
ax2.set_ylim(0, threshold * 4)

# Set x limits to min and max of t_rel_stim
ax2.set_xlim(t_rel_stim.min(), t_rel_stim.max())

fig.subplots_adjust(hspace=0.25)

if SAVE_FIGS:
    plt.savefig(FIGURE_DIR / 'microsaccade_example_trial130_monkeyF.png', dpi=300)
    plt.savefig(FIGURE_DIR / 'microsaccade_example_trial130_monkeyF.svg')
    print(f'   - Saved example figure for Trial 130, Monkey F')

plt.show()

#%%
# Generate diagnostic PDF if requested
if EXPORT_SACCADE_PDF:
    print("\n   Generating diagnostic PDFs for microsaccade detection...")
    for monkey in MONKEYS:
        pdf_path = FIGURE_DIR / f'microsaccade_diagnostics_{monkey}.pdf'
        generate_microsaccade_diagnostic_pdf(
            pdf_path=pdf_path,
            eye_position=monkey_data[monkey]['eye_position'],
            eye_speed=monkey_data[monkey]['eye_speed'],
            t_rel_stim=monkey_data[monkey]['t_rel_stim'],
            saccade_samples=microsaccade_data[monkey]['saccade_samples'],
            threshold=MICROSACCADE_THRESHOLD[monkey],
            trial_attended=monkey_data[monkey]['trial_attended']
        )
        print(f'   - Saved {pdf_path}')

#%%
# Visualize microsaccade timing across all trials
# Layout: 2 rows Ã 2 columns (MonkeyN left, MonkeyF right)
fig, axs = plt.subplots(2, 2, figsize=(14, 8), sharex=True)
fig.suptitle("Microsaccade Timing Across All Trials", fontsize=16, y=0.995)

for col_idx, monkey in enumerate(['monkeyN', 'monkeyF']):
    msacc_data = microsaccade_data[monkey]
    saccade_trials = msacc_data['saccade_trials']
    saccade_times = msacc_data['saccade_times']
    total_trials = msacc_data['total_trials']
    t_rel_stim = monkey_data[monkey]['t_rel_stim']

    # Raster plot of microsaccade times for each trial
    if len(saccade_times) > 0:
        axs[0, col_idx].eventplot([saccade_times[saccade_trials==iT] for iT in range(total_trials)],
                                   linelengths=5, linewidths=2, colors='k')
    axs[0, col_idx].axvline(x=0, color='r', linestyle='--', alpha=0.7)
    axs[0, col_idx].set_xlim(t_rel_stim[0], t_rel_stim[-1])
    axs[0, col_idx].set_ylim(0, total_trials)
    axs[0, col_idx].set_ylabel('Trial')
    axs[0, col_idx].set_title(f'Monkey {monkey[-1].upper()} - Raster Plot')
    axs[0, col_idx].grid(True, axis='x', alpha=0.3)

    # Histogram of microsaccade times
    if len(saccade_times) > 0:
        axs[1, col_idx].hist(saccade_times, bins=np.linspace(t_rel_stim[0], t_rel_stim[-1], 70), color='k')
    axs[1, col_idx].axvline(x=0, color='r', linestyle='--', alpha=0.7, label='Stimulus Onset')

    # Add microsaccade exclusion window (shown in green)
    axs[1, col_idx].axvspan(MICROSACCADE_WINDOW[0], MICROSACCADE_WINDOW[1],
                            alpha=0.2, color='green', zorder=0)

    # Add text label for exclusion window (only on right column to avoid clutter)
    if col_idx == 1:
        window_center = (MICROSACCADE_WINDOW[0] + MICROSACCADE_WINDOW[1]) / 2
        axs[1, col_idx].text(window_center, 30, f'Saccade\nExclusion Window\n({MICROSACCADE_WINDOW[0]} - {MICROSACCADE_WINDOW[1]} s)',
                            horizontalalignment='center', verticalalignment='bottom',
                            fontsize=10, fontweight='bold')

    # Add annotations only to the left column to avoid clutter
    if col_idx == 0:
        axs[1, col_idx].annotate('Pre-stimulus\nmicrosaccades', xy=(-.1, 20),
                 xytext=(-.075, 40),
                 arrowprops=dict(facecolor='black', arrowstyle='->'),
                 horizontalalignment='center')
        axs[1, col_idx].annotate('Post-stimulus\nsuppression', xy=(0.1, 5), xytext=(0.15, 30),
                 arrowprops=dict(facecolor='black', arrowstyle='->'),
                 horizontalalignment='center')
        axs[1, col_idx].annotate('Choice saccades', xy=(.45, 9), xytext=(.35, 40),
                 arrowprops=dict(facecolor='black', arrowstyle='->'),
                 horizontalalignment='center')

    axs[1, col_idx].set_xlabel('Time (s)')
    axs[1, col_idx].set_ylabel('Number of Saccades')
    axs[1, col_idx].set_title(f'Monkey {monkey[-1].upper()} - Rate Histogram')
    axs[1, col_idx].legend()

plt.tight_layout(rect=[0, 0, 1, 0.99])
if SAVE_FIGS:
    plt.savefig(FIGURE_DIR / 'microsaccade_timing.png', dpi=300)
    plt.savefig(FIGURE_DIR / 'microsaccade_timing.svg')
plt.show()

print("   - Note the characteristic suppression of microsaccades shortly after stimulus onset.")
print("   - Since feedforward effects are most critical, we will exclude trials with any microsaccades in the early stimulus window.")

#%%
# Compare attention effect in trials with vs. without microsaccades in the critical window.

# Calculate microsaccade trial masks and MUA for both monkeys
msacc_control_results = {}

for monkey in MONKEYS:
    msacc_data = microsaccade_data[monkey]
    data = monkey_data[monkey]
    saccade_trials = msacc_data['saccade_trials']
    saccade_times = msacc_data['saccade_times']
    total_trials = msacc_data['total_trials']
    population_mua = data['population_mua']
    trial_attended = data['trial_attended']
    t_rel_stim = data['t_rel_stim']

    # Identify trials that have at least one microsaccade within the specified window
    if len(saccade_times) > 0:
        msacc_window_mask = (saccade_times > MICROSACCADE_WINDOW[0]) & (saccade_times < MICROSACCADE_WINDOW[1])
        trials_with_msacc = np.unique(saccade_trials[msacc_window_mask])
    else:
        trials_with_msacc = np.array([])

    # Create a boolean mask for all trials
    msacc_trials_mask = np.zeros(total_trials, dtype=bool)
    if len(trials_with_msacc) > 0:
        msacc_trials_mask[trials_with_msacc] = True
    no_msacc_trials_mask = ~msacc_trials_mask

    print(f'\n{monkey}:')
    print(f'   - {np.sum(msacc_trials_mask)} trials WITH microsaccades between {MICROSACCADE_WINDOW[0]}-{MICROSACCADE_WINDOW[1]} s')
    print(f'   - {np.sum(no_msacc_trials_mask)} trials WITHOUT microsaccades in this window.')

    # Calculate MUA for trials without microsaccades
    no_saccade_all_mua = population_mua[no_msacc_trials_mask].mean(axis=0)
    no_saccade_attended_mua = population_mua[no_msacc_trials_mask & (trial_attended == 1)].mean(axis=0)
    no_saccade_unattended_mua = population_mua[no_msacc_trials_mask & (trial_attended == 0)].mean(axis=0)

    # Calculate attention window mask
    attention_window_mask = (t_rel_stim >= ATTENTION_WINDOW[0]) & (t_rel_stim <= ATTENTION_WINDOW[1])

    pval = ttest_ind(
        population_mua[no_msacc_trials_mask & (trial_attended == 1)][:, attention_window_mask].mean(axis=1),
        population_mua[no_msacc_trials_mask & (trial_attended == 0)][:, attention_window_mask].mean(axis=1)
    ).pvalue

    print(f'   - Attention effect in no-microsaccade trials: p = {pval:.3e}')

    # Calculate MUA for saccade vs. no-saccade trials (collapsed across attention)
    saccade_mua = population_mua[msacc_trials_mask].mean(axis=0) if np.sum(msacc_trials_mask) > 0 else np.zeros_like(t_rel_stim)
    no_saccade_mua = population_mua[no_msacc_trials_mask].mean(axis=0)

    # Calculate significance between saccade and no-saccade trials in microsaccade effect window
    microsaccade_effect_window_mask = (t_rel_stim >= MICROSACCADE_EFFECT_WINDOW[0]) & (t_rel_stim <= MICROSACCADE_EFFECT_WINDOW[1])
    if np.sum(msacc_trials_mask) > 0:
        pval_saccade_effect = ttest_ind(
            population_mua[msacc_trials_mask][:, microsaccade_effect_window_mask].mean(axis=1),
            population_mua[no_msacc_trials_mask][:, microsaccade_effect_window_mask].mean(axis=1)
        ).pvalue
    else:
        pval_saccade_effect = 1.0

    msacc_control_results[monkey] = {
        'no_saccade_all_mua': no_saccade_all_mua,
        'no_saccade_attended_mua': no_saccade_attended_mua,
        'no_saccade_unattended_mua': no_saccade_unattended_mua,
        'saccade_mua': saccade_mua,
        'no_saccade_mua': no_saccade_mua,
        'pval': pval,
        'pval_saccade_effect': pval_saccade_effect,
        'n_no_msacc': np.sum(no_msacc_trials_mask),
        'n_msacc': np.sum(msacc_trials_mask)
    }

# Plotting the results (2 rows Ã 2 columns)
# Row 0: Attention effect in no-saccade trials (MonkeyN left, MonkeyF right)
# Row 1: Saccade vs no-saccade comparison (MonkeyN left, MonkeyF right)
fig, axs = plt.subplots(2, 2, figsize=(14, 10), sharey='row')
fig.suptitle("Controlling for Microsaccade Effects", fontsize=16, y=0.995)

for col_idx, monkey in enumerate(['monkeyN', 'monkeyF']):
    results = msacc_control_results[monkey]
    t_rel_stim = monkey_data[monkey]['t_rel_stim']

    # Row 0: Attention effect in trials WITHOUT microsaccades
    axs[0, col_idx].plot(t_rel_stim, results['no_saccade_all_mua'], color='gray',
                         label='All Trials (No Msacc)', linestyle='--', alpha=0.7)
    axs[0, col_idx].plot(t_rel_stim, results['no_saccade_unattended_mua'], label='Unattended', color='b', linewidth=2)
    axs[0, col_idx].plot(t_rel_stim, results['no_saccade_attended_mua'], label='Attended', color='r', linewidth=2)
    axs[0, col_idx].axvline(x=0, color='k', linestyle='--')

    # Add counting window with significance
    add_significance_window(axs[0, col_idx], ATTENTION_WINDOW, results['pval'])

    axs[0, col_idx].set_title(f'Monkey {monkey[-1].upper()} - Trials Without Microsaccades (N={results["n_no_msacc"]})')
    axs[0, col_idx].set_xlabel('Time (s)')
    axs[0, col_idx].set_ylabel('Normalized MUA')
    axs[0, col_idx].legend()
    axs[0, col_idx].grid(True, alpha=0.3)

    # Row 1: MUA difference between saccade and no-saccade trials
    axs[1, col_idx].plot(t_rel_stim, results['saccade_mua'],
                         label=f'Saccade Trials (N={results["n_msacc"]})', color='g', linewidth=2)
    axs[1, col_idx].plot(t_rel_stim, results['no_saccade_mua'],
                         label=f'No Saccade Trials (N={results["n_no_msacc"]})', color='k', linewidth=2)
    axs[1, col_idx].axvline(x=0, color='k', linestyle='--')

    # Add significance window for saccade effect
    add_significance_window(axs[1, col_idx], MICROSACCADE_EFFECT_WINDOW, results['pval_saccade_effect'],
                           y_pos=0.5, bar_height=0.02)

    axs[1, col_idx].set_title(f'Monkey {monkey[-1].upper()} - Effect of Microsaccades on MUA')
    axs[1, col_idx].set_xlabel('Time (s)')
    axs[1, col_idx].set_ylabel('Normalized MUA')
    axs[1, col_idx].legend()
    axs[1, col_idx].grid(True, alpha=0.3)

plt.tight_layout(rect=[0, 0, 1, 0.99])
if SAVE_FIGS:
    plt.savefig(FIGURE_DIR / 'mua_control_microsaccades.png', dpi=300)
    plt.savefig(FIGURE_DIR / 'mua_control_microsaccades.svg')
plt.show()

print("\n" + "="*70)
print("CONCLUSION for Control 1 (Microsaccades):")
print("="*70)
print("A strong attention effect persists in trials completely free of")
print("microsaccades during the stimulus period.")
print("\nTherefore, the V1 attention effect is NOT driven by microsaccadic")
print("eye movements.")
print("="*70)

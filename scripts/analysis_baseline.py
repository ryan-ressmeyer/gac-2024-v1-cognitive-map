"""
Baseline Attention Effect Analysis for V1 Cognitive Map Study
==============================================================

This script establishes the core attention effect in V1 multi-unit activity (MUA)
by comparing neural responses between attended and unattended trials.

ANALYSIS:
---------
Baseline Attention Effect: Demonstrates increased V1 activity when attention is
directed to the receptive field location versus away from it. This is the primary
effect that will be tested against eye movement controls in subsequent analyses.

DEPENDENCIES:
-------------
- Requires preprocessed_data.h5 generated by preprocessing.py
- numpy, matplotlib, scipy.stats
- pathlib (file handling)
- h5py (HDF5 file reading)
- Custom utils module (add_significance_window)

Install dependencies using uv:
    uv sync
    uv run python scripts/analysis_baseline.py

USAGE:
------
1. First run preprocessing.py to generate preprocessed_data.h5
2. Run this script: python scripts/analysis_baseline.py

OUTPUTS:
--------
- Side-by-side plots comparing attended vs unattended MUA for both monkeys
- Statistical significance testing (t-test) in attention window
- Figures saved to figures/baseline/ directory

Author: Ryan Ressmeyer
"""

#%%
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from pathlib import Path
from scipy.stats import ttest_ind
from utils import add_significance_window, is_notebook
import h5py
np.random.seed(1001)  # For reproducibility

if is_notebook():
    matplotlib.use('inline')
else:
    matplotlib.use('Qt5Agg')

#%%
# =============================================================================
# CONFIGURATION SECTION
# =============================================================================

# Data paths
DATAGEN_DIR = '/home/ryanress/code/gac-2024-v1-cognitive-map/data/'
PREPROCESSED_DATA_FILE = Path(DATAGEN_DIR) / 'preprocessed_data.h5'

# Analysis parameters
MONKEYS = ['monkeyF', 'monkeyN']
CURRENT_TASK = 'lums'

# Analysis time windows
ATTENTION_WINDOW = [0.15, 0.5]  # Time window for statistical testing (s)

# Figure output
SAVE_FIGS = True
if SAVE_FIGS:
    FIGURE_DIR = Path('./figures/baseline')
    FIGURE_DIR.mkdir(exist_ok=True, parents=True)

#%%
# =============================================================================
# HELPER FUNCTION
# =============================================================================

def analyze_baseline_attention_effect(population_mua, trial_attended, t_rel_stim, attention_window, **kwargs):
    """
    Calculate attention effect statistics for baseline comparison.

    Args:
        population_mua: Neural activity array [trials x time]
        trial_attended: Binary array indicating attended (1) vs unattended (0) trials
        t_rel_stim: Time vector relative to stimulus onset
        attention_window: Tuple of (start_time, end_time) for counting window
        **kwargs: Additional arguments (ignored, allows passing full data dict)

    Returns:
        all_mua: mean MUA across all trials
        attended_mua: mean MUA for attended trials
        unattended_mua: mean MUA for unattended trials
        stats: dict with means, difference, and p-value
    """
    all_mua = population_mua.mean(axis=0)
    attended_mua = population_mua[trial_attended == 1].mean(axis=0)
    unattended_mua = population_mua[trial_attended == 0].mean(axis=0)

    # Calculate statistics in attention window
    window_mask = (t_rel_stim >= attention_window[0]) & (t_rel_stim <= attention_window[1])
    attended_window = population_mua[trial_attended == 1][:, window_mask].mean(axis=1)
    unattended_window = population_mua[trial_attended == 0][:, window_mask].mean(axis=1)

    stats = {
        'mean_attended': attended_window.mean(),
        'mean_unattended': unattended_window.mean(),
        'difference': attended_window.mean() - unattended_window.mean(),
        'pvalue': ttest_ind(attended_window, unattended_window).pvalue
    }

    return all_mua, attended_mua, unattended_mua, stats

#%%
# =============================================================================
# LOAD PREPROCESSED DATA FROM HDF5
# =============================================================================

print("="*70)
print("BASELINE ATTENTION EFFECT ANALYSIS")
print("="*70)
print(f"Loading preprocessed data from: {PREPROCESSED_DATA_FILE}")
print(f"Analyzing monkeys: {', '.join(MONKEYS)}")
print(f"Task: {CURRENT_TASK}")
print("="*70)

# Load data for both monkeys from HDF5
monkey_data = {}

with h5py.File(PREPROCESSED_DATA_FILE, 'r') as f:
    for monkey in MONKEYS:
        monkey_group = f[monkey]

        # Load arrays for this monkey
        monkey_data[monkey] = {
            'population_mua': monkey_group['population_mua'][:],
            'eye_position': monkey_group['eye_position_filtered'][:],
            'eye_velocity': monkey_group['eye_velocity'][:],
            'eye_speed': monkey_group['eye_speed'][:],
            't_rel_stim': monkey_group['t_rel_stim'][:],
            'trial_attended': monkey_group['trial_attended'][:]
        }

# Print summary statistics for both monkeys
print("\nData Summary:")
for monkey in MONKEYS:
    data = monkey_data[monkey]
    total_trials = data['population_mua'].shape[0]
    n_attended = np.sum(data['trial_attended'] == 1)
    n_unattended = np.sum(data['trial_attended'] == 0)

    print(f"\n{monkey}:")
    print(f"   - Total trials: {total_trials}")
    print(f"   - Attended trials: {n_attended}")
    print(f"   - Unattended trials: {n_unattended}")
    print(f"   - Population MUA shape: {data['population_mua'].shape}")

#%%
# =============================================================================
# BASELINE NEURAL ATTENTION EFFECT
# =============================================================================

print("""
This section establishes the core attention effect that we will control for.

ANALYSIS: Compare average neural activity between attended and unattended trials
- This is the primary effect we want to show persists after eye movement controls
- Provides the baseline against which we will compare controlled analyses
""")

print("\n1. Analyzing baseline attention effect on neural activity...")

# Analyze both monkeys
results = {}
for monkey in MONKEYS:
    all_mua, att_mua, unatt_mua, stats = analyze_baseline_attention_effect(
        **monkey_data[monkey],
        attention_window=ATTENTION_WINDOW
    )
    results[monkey] = {
        'all_mua': all_mua,
        'attended_mua': att_mua,
        'unattended_mua': unatt_mua,
        'stats': stats
    }

    n_attended = np.sum(monkey_data[monkey]['trial_attended'] == 1)
    n_unattended = np.sum(monkey_data[monkey]['trial_attended'] == 0)

    print(f"\n{monkey}:")
    print(f"   - Attended trials: {n_attended}")
    print(f"   - Unattended trials: {n_unattended}")
    print(f"   - Mean attended activity: {stats['mean_attended']:.3f}")
    print(f"   - Mean unattended activity: {stats['mean_unattended']:.3f}")
    print(f"   - Attention effect magnitude: {stats['difference']:.3f}")
    print(f"   - p-value (t-test): {stats['pvalue']:.3e}")

# Create side-by-side plots (MonkeyN left, MonkeyF right)
fig, axes = plt.subplots(1, 2, figsize=(14, 5), sharey=True)

for idx, monkey in enumerate(['monkeyN', 'monkeyF']):
    ax = axes[idx]
    t_rel_stim = monkey_data[monkey]['t_rel_stim']

    ax.plot(t_rel_stim, results[monkey]['all_mua'], color='gray', label='All Trials', alpha=0.7)
    ax.plot(t_rel_stim, results[monkey]['unattended_mua'], color='b', linewidth=2, label='Unattended')
    ax.plot(t_rel_stim, results[monkey]['attended_mua'], color='r', linewidth=2, label='Attended')
    ax.axvline(x=0, color='k', linestyle='--', linewidth=1)

    # Add counting window with significance
    add_significance_window(ax, ATTENTION_WINDOW, results[monkey]['stats']['pvalue'])

    ax.grid()
    ax.set_xlabel('Time (s)')
    ax.set_ylabel('Normalized MUA')
    ax.legend()
    ax.set_title(f'Monkey {monkey[-1].upper()} - Baseline Attention Effect')

plt.tight_layout()
if SAVE_FIGS:
    plt.savefig(FIGURE_DIR / 'baseline_attention_effect.png', dpi=300)
    plt.savefig(FIGURE_DIR / 'baseline_attention_effect.svg')
plt.show()

print("\n" + "="*70)
print("BASELINE ANALYSIS COMPLETE")
print("="*70)
print("KEY FINDING: Strong attention effects observed in both monkeys.")
print("Next steps: Run eye movement control analyses to verify this effect")
print("is not driven by eye movements.")
print("="*70)

"""
Eye Position Control Analysis for V1 Cognitive Map Study
=========================================================

This script tests whether systematic differences in mean gaze position between
attention conditions could account for observed neural differences.

BACKGROUND:
-----------
If attention effects are due to eye position differences, then:
1. Attended and unattended trials should have different mean eye positions
2. Neural activity should vary systematically with eye position
3. Attention effects should disappear when controlling for eye position

HYPOTHESIS:
-----------
If attention effects are attributable to differences in eye position, then
stratifying trials by eye position should eliminate the attention effect.

METHOD:
-------
- Compare mean eye position between attention conditions during stimulus period
- Visualize sample eye position traces and 2D spatial distribution
- Divide trials into quartiles based on eye position
- Test for attention effects within each position quartile

DEPENDENCIES:
-------------
- Requires preprocessed_data.h5 generated by preprocessing.py
- numpy, matplotlib, scipy.stats
- pathlib, h5py
- Custom utils module (add_significance_window, pvalue_to_stars, significance_connector)

Install dependencies using uv:
    uv sync
    uv run python scripts/analysis_position.py

USAGE:
------
1. First run preprocessing.py to generate preprocessed_data.h5
2. Run this script: python scripts/analysis_position.py

OUTPUTS:
--------
- Sample eye position traces (X and Y components)
- 2D histogram of eye positions
- Mean eye position by attention condition
- Eye position distribution with quartile analysis
- Neural activity stratified by eye position quartiles
- Figures saved to figures/position/ directory

Author: Ryan Ressmeyer
"""

#%%
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.lines
from pathlib import Path
from scipy.stats import ttest_ind
from utils import add_significance_window, pvalue_to_stars, significance_connector, is_notebook
import h5py
np.random.seed(42)  # For reproducibility

if is_notebook():
    matplotlib.use('inline')
else:
    matplotlib.use('Qt5Agg')

#%%
# =============================================================================
# CONFIGURATION SECTION
# =============================================================================

# Data paths
DATAGEN_DIR = '/home/ryanress/code/gac-2024-v1-cognitive-map/data/'
PREPROCESSED_DATA_FILE = Path(DATAGEN_DIR) / 'preprocessed_data.h5'

# Analysis parameters
MONKEYS = ['monkeyF', 'monkeyN']
CURRENT_TASK = 'lums'

# Analysis time windows
ATTENTION_WINDOW = [0.15, 0.5]
EYE_POSITION_WINDOW = [0.25, 0.4]  # Time window for mean position analysis (s)

# Quartile analysis
N_BINS = 4  # Number of quartiles for stratification

# Figure output
SAVE_FIGS = True
if SAVE_FIGS:
    FIGURE_DIR = Path('./figures/position')
    FIGURE_DIR.mkdir(exist_ok=True, parents=True)

#%%
# =============================================================================
# HELPER FUNCTION
# =============================================================================

def calculate_eye_position_stats(eye_position, trial_attended, t_rel_stim, eye_position_window, **kwargs):
    """
    Calculate eye position statistics and quartiles.

    Args:
        eye_position: Eye position array [trials x time x 2]
        trial_attended: Binary array indicating attended (1) vs unattended (0) trials
        t_rel_stim: Time vector relative to stimulus onset
        eye_position_window: Tuple of (start_time, end_time) for position analysis
        **kwargs: Additional arguments (ignored, allows passing full data dict)

    Returns:
        mean_attended: mean eye position over time for attended trials
        ste_attended: standard error for attended trials
        mean_unattended: mean eye position over time for unattended trials
        ste_unattended: standard error for unattended trials
        trial_pos_y: mean Y position per trial in analysis window
        quartile_edges: bin edges for quartile analysis
        pvalue: t-test p-value for Y position difference
    """
    # Calculate mean and STE for each condition
    n_attended = np.sum(trial_attended == 1)
    n_unattended = np.sum(trial_attended == 0)
    mean_attended = eye_position[trial_attended == 1].mean(axis=0)
    ste_attended = eye_position[trial_attended == 1].std(axis=0) / np.sqrt(n_attended)
    mean_unattended = eye_position[trial_attended == 0].mean(axis=0)
    ste_unattended = eye_position[trial_attended == 0].std(axis=0) / np.sqrt(n_unattended)

    # Calculate mean Y position per trial in specified window
    pos_mask = (t_rel_stim >= eye_position_window[0]) & (t_rel_stim <= eye_position_window[1])
    trial_pos_y = eye_position[:, pos_mask, 1].mean(axis=1)

    # Calculate quartile edges
    quartile_edges = np.percentile(trial_pos_y, np.linspace(0, 100, 5))

    # Calculate t-test
    pvalue = ttest_ind(trial_pos_y[trial_attended == 1], trial_pos_y[trial_attended == 0]).pvalue

    return mean_attended, ste_attended, mean_unattended, ste_unattended, trial_pos_y, quartile_edges, pvalue

#%%
# =============================================================================
# LOAD PREPROCESSED DATA FROM HDF5
# =============================================================================

print("="*70)
print("EYE POSITION CONTROL ANALYSIS")
print("="*70)
print(f"Loading preprocessed data from: {PREPROCESSED_DATA_FILE}")
print(f"Analyzing monkeys: {', '.join(MONKEYS)}")
print(f"Task: {CURRENT_TASK}")
print("="*70)

# Load data for both monkeys from HDF5
monkey_data = {}

with h5py.File(PREPROCESSED_DATA_FILE, 'r') as f:
    for monkey in MONKEYS:
        monkey_group = f[monkey]

        # Load arrays for this monkey
        monkey_data[monkey] = {
            'population_mua': monkey_group['population_mua'][:],
            'eye_position': monkey_group['eye_position_filtered'][:],
            'eye_velocity': monkey_group['eye_velocity'][:],
            'eye_speed': monkey_group['eye_speed'][:],
            't_rel_stim': monkey_group['t_rel_stim'][:],
            'trial_attended': monkey_group['trial_attended'][:]
        }

# Print summary statistics for both monkeys
print("\nData Summary:")
for monkey in MONKEYS:
    data = monkey_data[monkey]
    total_trials = data['population_mua'].shape[0]
    n_attended = np.sum(data['trial_attended'] == 1)
    n_unattended = np.sum(data['trial_attended'] == 0)

    print(f"\n{monkey}:")
    print(f"   - Total trials: {total_trials}")
    print(f"   - Attended trials: {n_attended}")
    print(f"   - Unattended trials: {n_unattended}")

#%%
# =============================================================================
# Visualize Sample Eye Position Trials
# =============================================================================

print("\n   Visualizing sample eye position trials...")

n_trials_to_plot = 3
bins = np.linspace(-.75, .75, 50)  # Position bins in degrees

# Create 2x3 subplot (MonkeyN on top, MonkeyF on bottom)
fig, axs = plt.subplots(2, 3, figsize=(15, 8), width_ratios=[1,1,.8])

for row_idx, monkey in enumerate(['monkeyN', 'monkeyF']):
    data = monkey_data[monkey]
    t_rel_stim = data['t_rel_stim']
    eye_position = data['eye_position']
    trial_attended = data['trial_attended']

    # Select random trials to plot
    attended_indices = np.where(trial_attended == 1)[0]
    unattended_indices = np.where(trial_attended == 0)[0]
    attn_plot = np.random.permutation(attended_indices)[:n_trials_to_plot]
    unattn_plot = np.random.permutation(unattended_indices)[:n_trials_to_plot]
    t_mask = (0 < t_rel_stim) & (t_rel_stim < 0.5)

    ep_unattn = eye_position[unattn_plot]
    ep_attn = eye_position[attn_plot]

    # Panel 1: X Position
    axs[row_idx, 0].plot(t_rel_stim, ep_unattn[:,:,0].T, alpha=1, c='b', linewidth=1)
    axs[row_idx, 0].plot(t_rel_stim, ep_attn[:,:,0].T, alpha=1, c='r', linewidth=1)
    axs[row_idx, 0].axvline(x=0, color='k', linestyle='--', linewidth=1.5)
    axs[row_idx, 0].set_title(f'Monkey {monkey[-1].upper()} - X Position')
    axs[row_idx, 0].set_ylabel('Position (degrees)')
    axs[row_idx, 0].set_xlabel('Time (s)')
    axs[row_idx, 0].set_ylim(-.75, .75)
    axs[row_idx, 0].grid(True, alpha=0.3)
    if row_idx == 0:  # Add legend only to top row
        lines = [
            matplotlib.lines.Line2D([0], [0], color='b', lw=2, alpha=0.7),
            matplotlib.lines.Line2D([0], [0], color='r', lw=2, alpha=0.7),
            matplotlib.lines.Line2D([0], [0], color='k', lw=1.5, linestyle='--')
        ]
        axs[row_idx, 0].legend(lines, ['Unattended', 'Attended', 'Stimulus Onset'])

    # Panel 2: Y Position
    axs[row_idx, 1].plot(t_rel_stim, ep_unattn[:,:,1].T, alpha=1, c='b', linewidth=1)
    axs[row_idx, 1].plot(t_rel_stim, ep_attn[:,:,1].T, alpha=1, c='r', linewidth=1)
    axs[row_idx, 1].axvline(x=0, color='k', linestyle='--', linewidth=1.5)
    axs[row_idx, 1].set_title(f'Monkey {monkey[-1].upper()} - Y Position')
    axs[row_idx, 1].set_ylabel('Position (degrees)')
    axs[row_idx, 1].set_xlabel('Time (s)')
    axs[row_idx, 1].set_ylim(-.75, .75)
    axs[row_idx, 1].grid(True, alpha=0.3)

    # Panel 3: 2D Histogram of all trials (0-500ms window)
    ep_all_trials = eye_position[:, t_mask, :]
    h = axs[row_idx, 2].hist2d(ep_all_trials[:,:,0].flatten(),
                       ep_all_trials[:,:,1].flatten(),
                       bins=[bins, bins], cmap='inferno')
    axs[row_idx, 2].set_title(f'Monkey {monkey[-1].upper()} - 2D Histogram (0-500 ms)')
    axs[row_idx, 2].set_xlabel('X Position (degrees)')
    axs[row_idx, 2].set_ylabel('Y Position (degrees)')
    axs[row_idx, 2].set_aspect('equal')
    fig.colorbar(h[3], ax=axs[row_idx, 2], label='Counts')

fig.suptitle('Sample Eye Position Trials', fontsize=16, y=0.995)
fig.tight_layout()
if SAVE_FIGS:
    fig.savefig(FIGURE_DIR / 'sample_eye_position_trials.png', dpi=300)
    fig.savefig(FIGURE_DIR / 'sample_eye_position_trials.svg')
plt.show()

#%%
# =============================================================================
# CONTROL 2: OVERALL EYE POSITION ANALYSIS
# =============================================================================

print("""
Test whether systematic differences in mean gaze position between attention conditions
could account for observed neural differences.

HYPOTHESIS: If attention effects are attributable to differences in eye position, then:
1. Attended and unattended trials should have different mean eye positions
2. Neural activity should vary systematically with eye position
3. Attention effects should disappear when controlling for eye position

METHOD:
- Compare mean eye position between attention conditions during stimulus period
- Divide trials into quartiles based on eye position
- Test for attention effects within each position quartile
""")

print("\n2. CONTROL 2: Testing for differences in eye position between attention conditions...")

# Calculate statistics for both monkeys
eye_pos_stats = {}
for monkey in MONKEYS:
    mean_att, ste_att, mean_unatt, ste_unatt, _, _, _ = calculate_eye_position_stats(
        **monkey_data[monkey],
        eye_position_window=EYE_POSITION_WINDOW
    )
    eye_pos_stats[monkey] = {
        'mean_attended': mean_att,
        'ste_attended': ste_att,
        'mean_unattended': mean_unatt,
        'ste_unattended': ste_unatt
    }

# Plot the mean eye position over time for both monkeys (2 rows × 2 columns)
# MonkeyN on left, MonkeyF on right
fig, axes = plt.subplots(2, 2, figsize=(14, 10), sharex=True)

for col_idx, monkey in enumerate(['monkeyN', 'monkeyF']):
    t_rel_stim = monkey_data[monkey]['t_rel_stim']
    stats = eye_pos_stats[monkey]
    mean_att = stats['mean_attended']
    ste_att = stats['ste_attended']
    mean_unatt = stats['mean_unattended']
    ste_unatt = stats['ste_unattended']

    # X-Position Plot (top row)
    ax = axes[0, col_idx]
    ax.fill_between(t_rel_stim,
                    mean_unatt[:,0] - ste_unatt[:,0]*1.96,
                    mean_unatt[:,0] + ste_unatt[:,0]*1.96,
                    color='b', alpha=0.2, label='Unattended - 95% CI')
    ax.plot(t_rel_stim, mean_unatt[:,0], c='b', label='Unattended')
    ax.fill_between(t_rel_stim,
                    mean_att[:,0] - ste_att[:,0]*1.96,
                    mean_att[:,0] + ste_att[:,0]*1.96,
                    color='r', alpha=0.2, label='Attended - 95% CI')
    ax.plot(t_rel_stim, mean_att[:,0], c='r', label='Attended')
    ax.axvline(x=0, color='k', linestyle='--')
    ax.set_ylabel('Horizontal Position (degrees)')
    ax.set_ylim(-.2, .2)
    ax.set_title(f'Monkey {monkey[-1].upper()} - X Position')
    ax.grid(True, alpha=0.3)
    ax.legend()

    # Y-Position Plot (bottom row)
    ax = axes[1, col_idx]
    ax.fill_between(t_rel_stim,
                    mean_unatt[:,1] - ste_unatt[:,1]*1.96,
                    mean_unatt[:,1] + ste_unatt[:,1]*1.96,
                    color='b', alpha=0.2, label='Unattended - 95% CI')
    ax.plot(t_rel_stim, mean_unatt[:,1], c='b', label='Unattended')
    ax.fill_between(t_rel_stim,
                    mean_att[:,1] - ste_att[:,1]*1.96,
                    mean_att[:,1] + ste_att[:,1]*1.96,
                    color='r', alpha=0.2, label='Attended - 95% CI')
    ax.plot(t_rel_stim, mean_att[:,1], c='r', label='Attended')
    # Highlight the analysis window for mean position
    ax.fill_betweenx([-15, 15], EYE_POSITION_WINDOW[0], EYE_POSITION_WINDOW[1],
                     color='g', alpha=0.1, label='Position Window', zorder=0)
    ax.axvline(x=0, color='k', linestyle='--')
    ax.set_ylim(-.2, .2)
    ax.set_xlabel('Time (s)')
    ax.set_ylabel('Vertical Position (degrees)')
    ax.set_title(f'Monkey {monkey[-1].upper()} - Y Position')
    ax.grid(True, alpha=0.3)
    ax.legend()

fig.suptitle('Eye Position by Attention Condition', fontsize=16, y=0.995)
plt.tight_layout()
if SAVE_FIGS:
    plt.savefig(FIGURE_DIR / 'eye_position_by_attention_condition.png', dpi=300)
    plt.savefig(FIGURE_DIR / 'eye_position_by_attention_condition.svg')
plt.show()

print("   - Green shaded region indicates time window for position analysis.")
print("   - X position shows no significant difference between attention conditions.")
print("   - Y position shows a small but consistent difference between conditions.")
print("   - Next, we will test if this small difference can explain the attention effect.")

#%%
# Stratify by eye position to control for the observed difference.
# We will split the distribution of Y eye positions into quartiles and check if the
# attention effect is present within each quartile.

print("\n   Analyzing MUA within eye position quartiles...")

# Calculate position statistics for both monkeys
position_data = {}

for monkey in MONKEYS:
    _, _, _, _, trial_pos_y, edges, pval = calculate_eye_position_stats(
        **monkey_data[monkey],
        eye_position_window=EYE_POSITION_WINDOW
    )
    trial_attended = monkey_data[monkey]['trial_attended']

    attn_pos_y = trial_pos_y[trial_attended == 1].mean()
    unattn_pos_y = trial_pos_y[trial_attended == 0].mean()

    position_data[monkey] = {
        'trial_pos_y': trial_pos_y,
        'edges': edges,
        'pval': pval,
        'attn_pos_y': attn_pos_y,
        'unattn_pos_y': unattn_pos_y
    }

    print(f'\n{monkey}:')
    print(f'   - Mean attended Y position: {attn_pos_y:.2f} degrees')
    print(f'   - Mean unattended Y position: {unattn_pos_y:.2f} degrees')
    print(f'   - T-test for difference in mean Y position: p = {pval:.3f}')
    print(f'   - Y position bin edges (quartiles): {np.round(edges, 2)}')

# Plot the distribution of eye positions for both monkeys (side-by-side)
fig, axes = plt.subplots(1, 2, figsize=(14, 6))

for col_idx, monkey in enumerate(['monkeyN', 'monkeyF']):
    ax = axes[col_idx]
    data = position_data[monkey]
    trial_pos_y = data['trial_pos_y']
    edges = data['edges']
    pval = data['pval']
    attn_pos_y = data['attn_pos_y']
    unattn_pos_y = data['unattn_pos_y']
    trial_attended = monkey_data[monkey]['trial_attended']

    hist_bins = np.linspace(edges[0], edges[-1], 30)
    ax.hist(trial_pos_y, bins=hist_bins, label='All trials', color='gray', alpha=0.6)
    ax.hist(trial_pos_y[trial_attended == 1], bins=hist_bins, alpha=0.7, label='Attended', color='r')
    ax.hist(trial_pos_y[trial_attended == 0], bins=hist_bins, alpha=0.7, label='Unattended', color='b')

    # Add mean indicators and significance connector
    ax.scatter([attn_pos_y], [60], color='r', marker='v', s=100, label='Attended Mean', zorder=5)
    ax.scatter([unattn_pos_y], [60], color='b', marker='v', s=100, label='Unattended Mean', zorder=5)
    pval_text = f'{pvalue_to_stars(pval)}\n(p={pval:.1e})' if pval < 0.05 else 'n.s.'
    significance_connector(attn_pos_y, unattn_pos_y, 65, 5, pval_text, ax=ax)

    for e in edges:
        ax.axvline(x=e, color='k', linestyle='--', label='Quartile edges' if e == edges[0] else None, alpha=0.5)

    ax.legend()
    ax.set_title(f'Monkey {monkey[-1].upper()} - Mean Y Eye Position (0.3-0.4s)')
    ax.set_xlabel('Mean Vertical Eye Position (degrees)')
    ax.set_ylabel('Number of Trials')

fig.suptitle('Distribution of Eye Position', fontsize=16, y=1.00)
plt.tight_layout()
if SAVE_FIGS:
    plt.savefig(FIGURE_DIR / 'eye_position_distribution.png', dpi=300)
    plt.savefig(FIGURE_DIR / 'eye_position_distribution.svg')
plt.show()

print("\n   - The difference in mean eye position is small compared to the overall distribution.")
print("   - Now, let's see if the MUA attention effect persists within each position quartile.")

#%%
# Plot MUA for attended vs. unattended trials within each eye position quartile
# Layout: 5 rows × 2 columns (MonkeyN left, MonkeyF right)
fig, axs = plt.subplots(N_BINS+1, 2, figsize=(14, 12), sharex=True, sharey=True)
fig.suptitle('MUA Conditioned on Eye Position', y=0.995, fontsize=16)

for col_idx, monkey in enumerate(['monkeyN', 'monkeyF']):
    data = monkey_data[monkey]
    pos_data = position_data[monkey]
    population_mua = data['population_mua']
    trial_attended = data['trial_attended']
    t_rel_stim = data['t_rel_stim']
    trial_pos_y = pos_data['trial_pos_y']
    edges = pos_data['edges']

    # Calculate attention window mask
    attention_window_mask = (t_rel_stim >= ATTENTION_WINDOW[0]) & (t_rel_stim <= ATTENTION_WINDOW[1])

    for i in range(N_BINS):
        e0, e1 = edges[i], edges[i+1]
        # Create a mask for trials within the current position quartile
        quartile_mask = (trial_pos_y >= e0) & (trial_pos_y <= e1)

        # Calculate MUA for all, attended, and unattended trials in this quartile
        all_activity = population_mua[quartile_mask].mean(axis=0)
        attn_activity = population_mua[quartile_mask & (trial_attended == 1)]
        unattn_activity = population_mua[quartile_mask & (trial_attended == 0)]
        pval = ttest_ind(attn_activity[:, attention_window_mask].mean(axis=1),
                         unattn_activity[:, attention_window_mask].mean(axis=1)).pvalue

        # Plotting - row 0 shows all quartiles overlaid
        axs[0, col_idx].plot(t_rel_stim, all_activity, label=f'Q{i+1}: [{e0:.1f}, {e1:.1f}]°')

        # Plotting - rows 1-4 show individual quartiles with attention comparison
        axs[i+1, col_idx].plot(t_rel_stim, all_activity, c='gray', alpha=0.5, label='All trials')
        axs[i+1, col_idx].plot(t_rel_stim, attn_activity.mean(axis=0), label='Attended', color='r')
        axs[i+1, col_idx].plot(t_rel_stim, unattn_activity.mean(axis=0), label='Unattended', color='b')
        axs[i+1, col_idx].axvline(x=0, color='k', linestyle='--')
        axs[i+1, col_idx].set_ylim(-.3, 1.3)
        axs[i+1, col_idx].axhline(y=0, color='k', linestyle='--', alpha=0.3, zorder=0)

        # Add counting window with significance
        add_significance_window(axs[i+1, col_idx], ATTENTION_WINDOW, pval)

        axs[i+1, col_idx].set_title(f'Q{i+1}: [{e0:.1f}, {e1:.1f}]°')
        axs[i+1, col_idx].grid(True, alpha=0.2)
        if i == 0:
            axs[i+1, col_idx].legend()

    # Configure top row
    axs[0, col_idx].set_ylabel('Normalized MUA')
    axs[0, col_idx].set_title(f'Monkey {monkey[-1].upper()} - All Quartiles')
    axs[0, col_idx].legend()
    axs[0, col_idx].grid(True, alpha=0.2)
    axs[0, col_idx].axvline(x=0, color='k', linestyle='--')

# Set x-labels for bottom row
axs[-1, 0].set_xlabel('Time (s)')
axs[-1, 1].set_xlabel('Time (s)')

# Add y-axis label
fig.text(0.04, 0.5, 'Normalized MUA', va='center', rotation='vertical', fontsize=12)
plt.tight_layout(rect=[0.05, 0, 1, 0.99])
if SAVE_FIGS:
    plt.savefig(FIGURE_DIR / 'mua_by_eye_position_quartile.png', dpi=300)
    plt.savefig(FIGURE_DIR / 'mua_by_eye_position_quartile.svg')
plt.show()

print("\n" + "="*70)
print("CONCLUSION for Control 2 (Eye Position):")
print("="*70)
print("A robust attention effect (Attended > Unattended) is present within")
print("each eye position quartile.")
print("\nTherefore, the V1 attention effect is NOT driven by the small")
print("systematic difference in mean eye position.")
print("="*70)

#%%
# =============================================================================
# CONTROL 3: Full Interaction Regression Plot
# =============================================================================
try:
    # Use the formula API for easier model specification
    import statsmodels.formula.api as smf
    import pandas as pd
except ImportError:
    print("\n---")
    print("ERROR: This analysis requires 'statsmodels' and 'pandas'.")
    print("Please install them by running: uv pip install statsmodels pandas")
    print("---")
    raise

print("\n" + "="*70)
print("Combined Control: Multiple Linear Regression with Interaction")
print("="*70)
print("Testing main effects and interaction effects in one model.")
print("Model: MUA_mean ~ β₁*attention + β₂*eye_pos_y + β₃*(attention*eye_pos_y)")

# This will store the results text for each monkey
interaction_regression_summaries = {}

for monkey in MONKEYS:
    print(f"\n--- Analyzing {monkey} ---")
    
    data = monkey_data[monkey]
    pos_data = position_data[monkey] 
    
    # 1. Prepare the Dependent Variable (Y): Mean MUA
    t_rel_stim = data['t_rel_stim']
    attention_window_mask = (t_rel_stim >= ATTENTION_WINDOW[0]) & (t_rel_stim <= ATTENTION_WINDOW[1])
    trial_mua_mean = data['population_mua'][:, attention_window_mask].mean(axis=1)

    # 2. Prepare the Independent Variables (X)
    trial_attended = data['trial_attended']
    trial_pos_y = pos_data['trial_pos_y']

    # 3. Create a Pandas DataFrame
    df = pd.DataFrame({
        'mua_mean': trial_mua_mean,
        'attention': trial_attended,
        'eye_pos_y': trial_pos_y
    })

    # 4. Define and Fit the Model
    model = smf.ols(formula='mua_mean ~ attention * eye_pos_y', data=df).fit()

    # 5. Print and store the results
    print(model.summary())
    interaction_regression_summaries[monkey] = model.summary()

    # 6. Get key results for interpretation
    p_val_attn = model.pvalues['attention']
    p_val_pos = model.pvalues['eye_pos_y']
    p_val_interact = model.pvalues['attention:eye_pos_y']
    
    print("\n--- Interpretation ---")
    print(f"p-value for β₁ (Attention): {p_val_attn:.3f}")
    print(f"p-value for β₂ (Position): {p_val_pos:.3f}")
    print(f"p-value for β₃ (Interaction): {p_val_interact:.3f}")
    
    if p_val_interact < 0.05:
        print("CONCLUSION: The interaction is STATISTICALLY SIGNIFICANT (p < 0.05)")
    else:
        print("CONCLUSION: The interaction is NOT statistically significant (p >= 0.05)")
    print("="*70)

    # Store data for combined plotting
    if monkey == MONKEYS[0]:
        monkey_regression_data = {}

    monkey_regression_data[monkey] = {
        'df': df,
        'model': model,
        'p_val_attn': p_val_attn,
        'p_val_pos': p_val_pos,
        'p_val_interact': p_val_interact
    }

# ==========================================================
# --- COMBINED PRESENTATION PLOT ---
# ==========================================================

print("\n   Generating combined presentation plot with 95% CI for both monkeys...")

fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Helper function to format p-values
def format_p(p_val):
    if p_val < 0.001:
        return "p < 0.001"
    else:
        return f"p = {p_val:.3f}"

for col_idx, monkey in enumerate(['monkeyN', 'monkeyF']):
    ax = axes[col_idx]

    # Get stored data
    data_dict = monkey_regression_data[monkey]
    df = data_dict['df']
    model = data_dict['model']
    p_val_attn = data_dict['p_val_attn']
    p_val_pos = data_dict['p_val_pos']
    p_val_interact = data_dict['p_val_interact']

    # 1. Plot the raw data points
    ax.scatter(df[df['attention'] == 0]['eye_pos_y'], df[df['attention'] == 0]['mua_mean'],
               c='b', alpha=0.15, label='Unattended Trials', s=15)
    ax.scatter(df[df['attention'] == 1]['eye_pos_y'], df[df['attention'] == 1]['mua_mean'],
               c='r', alpha=0.15, label='Attended Trials', s=15)

    # 2. Generate prediction dataframes
    x_line = np.linspace(df['eye_pos_y'].min(), df['eye_pos_y'].max(), 100)
    unattn_pred_data = pd.DataFrame({'eye_pos_y': x_line, 'attention': np.zeros(100)})
    attn_pred_data = pd.DataFrame({'eye_pos_y': x_line, 'attention': np.ones(100)})

    # 3. Get predictions and 95% confidence intervals
    unattn_pred = model.get_prediction(unattn_pred_data)
    unattn_ci = unattn_pred.summary_frame(alpha=0.05)

    attn_pred = model.get_prediction(attn_pred_data)
    attn_ci = attn_pred.summary_frame(alpha=0.05)

    # 4. Plot the regression lines
    ax.plot(x_line, unattn_ci['mean'], 'b', linewidth=3, label='Unattended Fit')
    ax.plot(x_line, attn_ci['mean'], 'r', linewidth=3, label='Attended Fit')

    # 5. Plot the 95% confidence intervals
    ax.fill_between(x_line,
                    unattn_ci['mean_ci_lower'],
                    unattn_ci['mean_ci_upper'],
                    color='b', alpha=0.15, label='95% CI')

    ax.fill_between(x_line,
                    attn_ci['mean_ci_lower'],
                    attn_ci['mean_ci_upper'],
                    color='r', alpha=0.15, label='95% CI')

    # 6. Add p-value text box
    text_str = (f"β₁ (Attention): {format_p(p_val_attn)}\n"
                f"β₂ (Position):  {format_p(p_val_pos)}\n"
                f"β₃ (Interaction): {format_p(p_val_interact)}")

    ax.text(0.04, 0.96, text_str,
            transform=ax.transAxes,
            ha='left', va='top', fontsize=11,
            bbox=dict(facecolor='white', alpha=0.8, boxstyle='round,pad=0.5'))

    # Consolidate legends
    handles, labels = ax.get_legend_handles_labels()
    # Remove duplicate CI label
    by_label = dict(zip(labels, handles))
    if monkey == 'monkeyN':
        ax.legend(by_label.values(), by_label.keys(), loc='lower right')

    ax.set_xlabel('Mean Vertical Eye Position (degrees)')
    ax.set_ylabel(f'Mean Normalized MUA ({ATTENTION_WINDOW[0]}-{ATTENTION_WINDOW[1]}s)')
    ax.set_title(f'Monkey {monkey[-1].upper()}')
    ax.grid(True, alpha=0.3)

fig.suptitle('MUA = β₀ + (β₁ × Attention) + (β₂ × Eye_Pos_Y) + (β₃ × Attention × Eye_Pos_Y)',
             fontsize=14, y=0.98)
plt.tight_layout()

if SAVE_FIGS:
    fig.savefig(FIGURE_DIR / 'mua_vs_position_interaction_summary_combined.png', dpi=300)
    fig.savefig(FIGURE_DIR / 'mua_vs_position_interaction_summary_combined.svg')
plt.show()

# Save the full text summaries to a file
if SAVE_FIGS:
    summary_path = FIGURE_DIR / 'interaction_regression_summary.txt'
    print(f"\nSaving full interaction regression summaries to: {summary_path}")
    with open(summary_path, 'w') as f:
        f.write("Interaction Regression Summary: Monkey N\n")
        f.write(str(interaction_regression_summaries.get('monkeyN', 'Not run.')))
        f.write("\n\n" + "="*80 + "\n\n")
        f.write("Interaction Regression Summary: Monkey F\n")
        f.write(str(interaction_regression_summaries.get('monkeyF', 'Not run.')))

print("\nInteraction regression analysis complete.")
print("="*70)
